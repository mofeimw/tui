#!/usr/bin/env bash

# clear screen and render each element
render() {
    # escape code to clear screen
    printf '\033[2J\033[H\033[?25l'

    # render header
    header "tui program"
    
    # render body content
    [ ${#body} -ne 0 ] && body

    # loop through <select>able elements and print
    for option in "${selectable[@]}"; do
        # test if the option has been selected by user
        if [[ "${selected[@]}" =~ "${option}" ]]; then
            [ "${selectable[$cursor]}" == "$option" ] && printf '\033[1m\033[45m\033[30m%s\033[m\n' "> $option" || printf '\033[1m\033[42m\033[30m%s\033[m\n' "$option"
        else
            [ "${selectable[$cursor]}" == "$option" ] && printf '\033[1m\033[32m%s\033[m\n' "> $option" || printf '\033[1m\033[34m%s\033[m\n' "$option"
        fi
    done

    # render submit button based on state
    [ "$submit" == visible ] && {
        for ((i=0; i<$COLUMNS; i++)); { echo -n " "; }
        printf '\033[1m\033[46m\033[30mdone\033[m\n'
    }

    [ "$submit" == selected ] && {
        for ((i=0; i<$COLUMNS; i++)); { echo -n " "; }
        printf '\033[1m\033[45m\033[30mdone\033[m\n'
    }
}

# recalculate window size and rerender
refresh() {
    # get dimensions
    read -r LINES COLUMNS < <(stty size)

    # rerender
    render
}

# hard reset
reset() {
    selectable=()
    selected=()
    body=()
    submit=""

    refresh
}

# print header
header() {
    # find z value with respect to the center point
    ((z = (COLUMNS - "${#1}") / 2 ))

    # fill output variable with appropriate amount of spaces to create banner
    out=""
    for ((i=0; i<z; i++)); { out+=" "; }
    out+="$1"
    for ((i=0; i<z; i++)); { out+=" "; }

    # add space to compensate for odd number of columns
    [ ! $(((COLUMNS - ${#1}) % 2)) -eq 0 ] && out+=" "

    # write to stdout, with bottom padding
    printf '\033[1m\033[44m\033[30m%s\033[m' "$out"
    for ((i=0; i<$COLUMNS; i++)); { echo -n " "; }
}

# render all in <body>
body() {
    for p in "${body[@]}"; do
        printf '\033[1m\033[34m%s\033[m' "$p"
        for ((i=0; i<$COLUMNS-${#p}; i++)); { echo -n " "; }
    done
    for ((i=0; i<$COLUMNS; i++)); { echo -n " "; }
}

# construct a <select>
choice() {
    # loop through arguments and add to (selectable) array
    for option in "$@"; do
        selectable+=("$option")
    done
    render
}

# file browser
browser() {
    body=("please select a file")
    queue "$1"

    # init/reset variables
    opts=""
    cursor=0

    # construct a <select> with all the files in the current directory, filtering by extension
    for file in *; do
        [ ${#exts} -ne 0 ] && {
            for e in "${exts[@]}"; do
                if [[ "$file" =~ .*\.$e ]] && [[ ! " ${opts[*]} " =~ " $file " ]]; then
                    opts+="$file "
                fi
            done
        } || opts+="$file "
    done
    choice $opts

    # set the type to filesystem mode
    submit=fs
}

# allow chainable function calls
next() {
    # set the next function
    next=${flow[1]}

    # remove the first (current) index in queue
    for f in "${flow[@]}"; do
        [ "${flow[0]}" == "$f" ] && {
            new=()
            for y in "${flow[@]}"; do
                [ ! "$y" == "${flow[0]}" ] && new+=("$y")
            done
            flow=("${new[@]}")
            unset new
            break
        }
    done

    $next
}

# add to up next queue
queue() { flow=("${flow[@]:0:1}" "$1" "${flow[@]:1}"); }

# submit button
submit() {
    # on_submit handler in file browser mode
    [ "$submit" == fs ] && {
        # reset and forward to next function in queue
        reset
        next
        return 0
    }

    # on submit handler when <select> was not in file browser mode
    # make sure there is at least one selection
    [ ${#selected[@]} -eq 0 ] && return 1

    # grab submitted form data
    data=("${selected[@]}") 
    
    reset

    # reorganizes selection and adds to queue in the correct order
    for ((i=0; i<=${#order[@]}; i++)); do
        if [[ " ${data[*]} " =~ " ${order[$i]} " ]]; then
            flow+=("${order[$i]}")
        fi
    done

    next
}

# "click" event handler
click() {
    # call submit() to send data
    [ "$submit" == selected ] && { submit; return 0; }

    # in file browser mode immediately submit after one selection, saving the selected file
    [ "$submit" == fs ] && {
        file="${selectable[$cursor]}"
        submit
    }
    
    # if no other selections have been made add the selected into the array
    [ ${#selected[@]} -eq 0 ] && {
        selected=("${selectable[$cursor]}")
        render
        return 0
    }

    # loop through each selected item
    for item in "${selected[@]}"; do
        # deselect item if it was already within the selected array
        [ "${selectable[$cursor]}" == "$item" ] && {
            # create new array and repopulate without the deselected option - to avoid leaving a gap in the indices
            new=()

            for value in "${selected[@]}"; do
                [ ! "$value" == "$item" ] && new+=($value)
            done

            selected=("${new[@]}")
            unset new

            render
            return 0
        }
    done

    # select the item the cursor is on
    selected+=("${selectable[$cursor]}")
    render
}

# cursor logic
curse() {
    # move selection away from submit button if it was already selected
    [ $submit == selected ] && {
        cursor=0
        submit=visible
    }

    # test submit button state
    [ $submit == visible ] && {
        [ $cursor -eq ${#selectable[@]} ] && submit=selected
    } || {
        [ $cursor -eq ${#selectable[@]} ] && cursor=0
    }
    [ $cursor -eq -1 ] && ((cursor = ${#selectable[@]} - 1))

    render
}

# event handlers
# adjusts the cursor position and adjusts snapback to prevent array index out of bounds
up() {
    ((cursor--))
    curse
}

down() {
    ((cursor++))
    curse
}

# do stuff with left and right keys
left() { :; }
right() { :; }

# map keys
keystroke() {
    # map escape codes
    [ -n $escape ] && {
        case $key in
            A)
                up
            ;;

            B)
                down
            ;;

            D)
                left
            ;;

            C) 
                right
            ;;
        esac

        unset escape
    }

    # set flag because escape keys send two seperate triggers
    [ "$key" == "[" ] && escape=true

    # map regular keys (vim-like keybinds yay)
    case $key in
        k)
            up
        ;;

        j)
            down
        ;;

        h)
            left
        ;;

        l)
            right
        ;;

        " "|"")
            click
        ;;

        q)
            exit 0
        ;;
    esac
}

# subfunctions
one() {
    browser uno
}

uno() {
    body=("you selected: $file")
    render
    sleep 2
    next
}

two() {
    body=("II")
    render
    stty icanon echo

    printf '\033[1m\033[34m%s\033[m' 'uhh type something: '
    read smth

    printf '\n\033[1m\033[34m%s\033[m' 'type something else: '
    read else
    
    stty -icanon -echo
    body=("you typed $smth!" "you also typed $else!")
    render
    sleep 2
    next
}

three() {
    body=("III")
    render
    sleep 2
    next
}

four() {
    body=("IV")
    render
    sleep 2
    next
}

# main() function
main() {
    # hide input and read keys one at a time
    stty -icanon -echo

    # catch window resizes and exits
    trap 'refresh' WINCH
    trap "stty icanon echo; printf '\033[?25h\033[2J\033[H'; exit 1" EXIT INT

    # init variables
    selectable=()
    selected=()
    flow=("home")
    order=("one" "two" "three" "four")
    cursor=0
    file=""
    exts=()

    # push <p> to the <body>
    body=("hola" "como estas?")

    # fresh start
    refresh

    # add some elements
    choice "one" "two" "three" "four"
    submit=visible

    # render!
    render

    # forever loop reading keys
    while key=$(dd ibs=1 count=1 2>/dev/null); do
        keystroke
    done
}

main "$@"
